set tool "quatcalc"
#set exp_internal 1
set arg1 "\[ 1 2 3 4 \]"
set arg2 "\[ 2 3 4 5 \]"
set arg3 "\[ 1 4 4 -4 \]"
set arg4 "\[ 7 2 3 4 \]"

# {"/ $arg1 $arg2" "\\[ -36 6 12 12 \\]"}
# inverse
# vfy ang, dot, cross
set testdata {
  {"+ $arg1 $arg2" "\\[ 3 5 7 9 \\]"}
  {"- $arg1 $arg2" "\\[ -1 -1 -1 -1 \\]"}
  {"* $arg1 $arg2" "\\[ -36 6 12 12 \\]"}
  {"* $arg1 5" "\\[ 5 10 15 20 \\]"}
  {"/ $arg1 5" "\\[ 0.2 0.4 0.6 0.8 \\]"}
  {"+ $arg1" "7"}
  {"* $arg1" "\\[ 1 -2 -3 -4 \\]"}
  {"* $arg4 $arg4" "\\[ 20 28 42 56 \\]"}
  {"== $arg1 $arg1" "1"}
  {"== $arg1 $arg2" "0"}
  {"!= $arg1 $arg1" "0"}
  {"!= $arg1 $arg2" "1"}
  {"ang $arg1 $arg2" "0.111341"}
  {"dot $arg1 $arg2" "38"}
  {"cross $arg1 $arg2" "\\[ 0 -1 2 -1 \\]"}
  {"scalar $arg1" "1"}
  {"axis $arg1" "2 3 4"}
  {"vector $arg1" "1 2 3 4"}
}

global QUATCALC

foreach pattern $testdata {
    set inputs   [lindex $pattern 0]
    set expected [lindex $pattern 1]
    eval "spawn $QUATCALC $inputs"
    expect {
         -re $expected {
            pass $pattern
        }
        default {
	    fail "$inputs $expected"
	}
    }
}
